<?php
/**
 * class TarskiAsset
 * 
 * @package Tarski
 * @since 2.1
 */
class TarskiAsset {
	
	/**
	 * Initialisation method which calls all other methods in turn.
	 */
	function init() {
		$assets = new TarskiAsset;
		
		$assets->meta();
		$assets->stylesheets();
		$assets->javascript();
		
		automatic_feed_links();
		
		$assets->output();
	}
	
	/**
	 * Generate meta elements pertaining to Tarski and the site.
	 * 
	 * @hook filter tarski_asset_meta
	 * Filters the metadata generated by the TarskiAsset wrapper.
	 */
	function meta() {
		$themeversion = theme_version();
		$meta = array("<meta name=\"wp_theme\" content=\"Tarski $themeversion\" />");
		
		global $wp_query;
		$excerpt = ($wp_query->post) ? trim(strip_tags(esc_attr($wp_query->post->post_excerpt))) : '';

		if ((is_single() || is_page()) && strlen($excerpt))
			$description = $excerpt;
		else
			$description = trim(strip_tags(get_bloginfo('description', 'display')));

		if (strlen($description))
			$meta[] = sprintf('<meta name="description" content="%s" />', wptexturize($description));
		
		if (get_option('blog_public') != '0')
			$meta[] = '<meta name="robots" content="all" />';
		
		$meta[] = '<link rel="profile" href="http://gmpg.org/xfn/11" />';
		
		$this->meta = apply_filters('tarski_asset_meta', $meta);
	}
	
	/**
	 * Generate links to the various Tarski stylesheets.
	 * 
	 * @hook filter tarski_style_array
	 * Filter the array of stylesheet attributes from which the stylesheet
	 * links are generated.
	 * 
	 * @hook filter tarski_stylesheets
	 * Filter the raw stylesheet link elements before they're printed to
	 * the document.
	 */
	function stylesheets() {
		$style_array = array(
			'main' => array(
				'url' => get_bloginfo('stylesheet_url'),
			),
			'screen' => array(
				'url' => get_bloginfo('template_directory') . '/library/css/screen.css',
				'media' => 'screen,projection'
			),
			'print' => array(
				'url' => get_bloginfo('template_directory') . '/library/css/print.css',
				'media' => 'print'
			)
		);

        if (get_tarski_option('style')) {
            $style_uri = _tarski_get_alternate_stylesheet_uri();
            
            if (strlen($style_uri) > 0)
                $style_array['alternate'] = array('url' => $style_uri);
        }
        
        $style_array = apply_filters('tarski_style_array', $style_array);

		if(is_array($style_array)) {
			foreach($style_array as $type => $values) {
				if(is_array($values) && $values['url']) {
					if(empty($values['media'])) {
						$values['media'] = 'all';
					}
					$stylesheets[$type] = sprintf(
						'<link rel="stylesheet" href="%1$s" type="text/css" media="%2$s" />',
						$values['url'],
						$values['media']
					);
				}
			}
		}

		$this->stylesheets = apply_filters('tarski_stylesheets', $stylesheets);
	}
	
	/**
	 * Generate script elements linking to Tarski's JavaScript.
	 * 
	 * @hook filter tarski_javascript
	 * Filter script elements before they're printed to the document.
	 */
	function javascript() {
		$scripts = array(
			'tarski-js' => tarski_js(get_bloginfo('template_directory') . '/app/js/tarski.js'),
			'comment-reply' => site_url('wp-includes/js/comment-reply.js')
		);
		
		foreach($scripts as $name => $url) {
			$javascript[$name] = "<script type=\"text/javascript\" src=\"$url\"></script>";
		}
		
		$this->javascript = apply_filters('tarski_javascript', $javascript);
	}
	
	/**
	 * Print generated HTML to the document.
	 * 
	 * @hook filter tarski_assets
	 * A more generalised filter for all assets generated by this class and
	 * printed by this method.
	 */
	function output() {
		$assets_collapsed = array();
		
		foreach ( $this as $asset ) {
			$assets_collapsed[] = implode("\n", $asset);
		}
		
		$assets_filtered = apply_filters('tarski_assets', $assets_collapsed);
		echo implode("\n\n", $assets_filtered);
	}
}

?>